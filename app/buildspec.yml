version: 0.2

# Define environment variables
# AWS_ACCOUNT_ID and AWS_DEFAULT_REGION are automatically provided by CodeBuild.
env:
  variables:
    ECR_REPO_NAME: "my-nginx"

phases:
  install:
    commands:
      - echo "Installing dependencies (if any)..."

  pre_build:
    commands:
      - echo "CODEBUILD_BUILD_NUMBER = $CODEBUILD_BUILD_NUMBER"
      - echo "Checking if ECR repository '$ECR_REPO_NAME' already exists..."

      # Use a more robust check that doesn't halt the build on a non-zero exit code.
      # '|| true' ensures that if the aws command fails (e.g., repo not found), the script doesn't exit and the following 'if' can exececute
      - REPO_EXISTS=$(aws ecr describe-repositories --repository-names $ECR_REPO_NAME --query "repositories[0].repositoryName" 2>/dev/null || true)
      - |
        if [ -z "$REPO_EXISTS" ]; then
           echo "ECR repository '$ECR_REPO_NAME' does not exist. Creating it now..."
           chmod +x infra/01-ECR/01-bootstrap-create-ecr-repo.sh
           cd infra/01-ECR
           ./01-bootstrap-create-ecr-repo.sh
           cd $CODEBUILD_SRC_DIR # Go back to the original source root
           echo "ECR repository '$ECR_REPO_NAME' creation script executed."
        else
           echo "ECR repository '$ECR_REPO_NAME' already exists. Skipping creation."
        fi

      - echo "Logging in to Amazon ECR..."

      - AWS_ACCOUNT_ID=$(echo $CODEBUILD_BUILD_ARN | cut -f 5 -d ':')
      - AWS_REGION=$(echo $CODEBUILD_BUILD_ARN | cut -f 4 -d ':')
      - ECR_REGISTRY_URI="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY_URI
      - echo "Successfully logged into ECR."

  build:
    commands:
      - echo "Building the Docker image..."
      - cd "$CODEBUILD_SRC_DIR/app"
      - docker build -t $ECR_REPO_NAME:$CODEBUILD_BUILD_NUMBER .
      - docker tag $ECR_REPO_NAME:$CODEBUILD_BUILD_NUMBER $ECR_REGISTRY_URI/$ECR_REPO_NAME:$CODEBUILD_BUILD_NUMBER
      - docker tag $ECR_REPO_NAME:$CODEBUILD_BUILD_NUMBER $ECR_REGISTRY_URI/$ECR_REPO_NAME:latest
      - echo "Docker image built and tagged."
      - cd $CODEBUILD_SRC_DIR

  # The 'post_build' phase is for running tests, pushing images, and cleaning up.
  post_build:
    commands:
      - echo "Starting container for testing..."

      - CONTAINER_ID=$(docker run -d -p 80:80 $ECR_REPO_NAME:$CODEBUILD_BUILD_NUMBER)

      - echo "Waiting for Nginx to start (10 seconds)..."
      - sleep 10 # Give Nginx enough time to start up inside the container.

      - echo "Testing Nginx response with curl..."
      # Use curl to send a request to localhost:80 and check the HTTP status code.
      # -s: Silent mode (don't show progress meter or error messages).
      # -o /dev/null: Discard output.
      # -w "%{http_code}": Print only the HTTP status code.
      - HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:80/index.html)
      - |
        if [ "$HTTP_STATUS" -eq 200 ]; then
          echo "Nginx test passed! Received HTTP status 200."
        else
          echo "Nginx test failed! Received HTTP status $HTTP_STATUS."
          # Exit with a non-zero status to fail the CodeBuild build if tests fail.
          exit 1
        fi

      - echo "Stopping and removing test container..."
      # Stop and remove the temporary container.
      - docker stop $CONTAINER_ID
      - docker rm $CONTAINER_ID
      - echo "Test container stopped and removed."

      - echo "Pushing the Docker image to Amazon ECR..."
      # Push the tagged Docker image to your ECR repository.
      - docker push $ECR_REGISTRY_URI/$ECR_REPO_NAME:$CODEBUILD_BUILD_NUMBER
      - docker push $ECR_REGISTRY_URI/$ECR_REPO_NAME:latest
      - echo "Image successfully pushed to ECR."

      - echo "Generating imagedefinitions.json artifact for CodeDeploy..."
      # Generate the imagedefinitions.json file for CodeDeploy.
      # The 'name' field must match the container name in your ECS Task Definition.
      # The 'imageUri' is the full path to the image in ECR.
      - printf '[{"name":"my-nginx","imageUri":"%s"}]' "$ECR_REGISTRY_URI/$ECR_REPO_NAME:$CODEBUILD_BUILD_NUMBER" > imagedefinitions.json
      - cat imagedefinitions.json # Print the content for verification

# For CodeDeploy, we specifically need the imagedefinitions.json file for a Rolling Deployment
# This file simply tells CodeDeploy which container in your ECS task definition should use which Docker image URI from ECR
artifacts:
  files:
    - 'imagedefinitions.json'
  discard-paths: yes # Discard the entire source directory structure
